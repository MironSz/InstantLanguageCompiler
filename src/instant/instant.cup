// -*- Java -*- This Cup file was machine-generated by BNFC
package instant;

parser code {:
  public instant.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (instant.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal instant.Absyn.Program Program;
nonterminal instant.Absyn.Statement Statement;
nonterminal instant.Absyn.ListStatement ListStatement;
nonterminal instant.Absyn.Expression Expression1;
nonterminal instant.Absyn.Expression Expression2;
nonterminal instant.Absyn.Expression Expression3;
nonterminal instant.Absyn.Expression Expression4;
nonterminal instant.Absyn.Expression Expression;

terminal _SYMB_0;    //   =
terminal _SYMB_1;    //   ;
terminal _SYMB_2;    //   +
terminal _SYMB_3;    //   -
terminal _SYMB_4;    //   *
terminal _SYMB_5;    //   /
terminal _SYMB_6;    //   (
terminal _SYMB_7;    //   )



terminal Integer _INTEGER_;

terminal String _IDENT_;



start with Program;


Program ::= ListStatement:p_1  {: RESULT = new instant.Absyn.Prog(p_1); :} 
;
Statement ::= _IDENT_:p_1 _SYMB_0 Expression:p_3  {: RESULT = new instant.Absyn.SAssignment(p_1,p_3); :} 
  | Expression:p_1  {: RESULT = new instant.Absyn.SExpression(p_1); :}
;
ListStatement ::=  /* empty */  {: RESULT = new instant.Absyn.ListStatement(); :} 
  | Statement:p_1  {: RESULT = new instant.Absyn.ListStatement(); RESULT.addLast(p_1); :}
  | Statement:p_1 _SYMB_1 ListStatement:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Expression1 ::= Expression2:p_1 _SYMB_2 Expression1:p_3  {: RESULT = new instant.Absyn.AdditionExpression(p_1,p_3); :} 
  | Expression2:p_1  {: RESULT = p_1; :}
;
Expression2 ::= Expression2:p_1 _SYMB_3 Expression3:p_3  {: RESULT = new instant.Absyn.SubtractExpression(p_1,p_3); :} 
  | Expression3:p_1  {: RESULT = p_1; :}
;
Expression3 ::= Expression3:p_1 _SYMB_4 Expression4:p_3  {: RESULT = new instant.Absyn.MultiplyExpression(p_1,p_3); :} 
  | Expression3:p_1 _SYMB_5 Expression4:p_3  {: RESULT = new instant.Absyn.DivideExpression(p_1,p_3); :}
  | Expression4:p_1  {: RESULT = p_1; :}
;
Expression4 ::= _INTEGER_:p_1  {: RESULT = new instant.Absyn.LiteralExpression(p_1); :} 
  | _IDENT_:p_1  {: RESULT = new instant.Absyn.VarExpression(p_1); :}
  | _SYMB_6 Expression:p_2 _SYMB_7  {: RESULT = p_2; :}
;
Expression ::= Expression1:p_1  {: RESULT = p_1; :} 
;

