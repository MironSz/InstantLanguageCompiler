
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Nov 14 20:02:02 CET 2020
//----------------------------------------------------

package instant;


/** CUP v0.10k generated parser.
  * @version Sat Nov 14 20:02:02 CET 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\003\003\000\002\004" +
    "\005\000\002\004\003\000\002\005\002\000\002\005\003" +
    "\000\002\005\005\000\002\006\005\000\002\006\003\000" +
    "\002\007\005\000\002\007\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\005\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\012\002\ufffd\012\005\014\015\015\014\001" +
    "\002\000\004\002\036\001\002\000\010\012\005\014\015" +
    "\015\020\001\002\000\020\002\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\013\ufff4\001\002\000\020\002\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\010\030\011\031\013\ufff7\001" +
    "\002\000\014\002\ufff9\005\ufff9\006\025\007\024\013\ufff9" +
    "\001\002\000\006\002\ufffe\005\ufffe\001\002\000\010\002" +
    "\ufff0\005\ufff0\013\ufff0\001\002\000\006\002\ufffc\005\022" +
    "\001\002\000\020\002\ufff2\004\017\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\001\002\000\020\002\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\013\ufff3\001\002\000" +
    "\004\002\000\001\002\000\010\012\005\014\015\015\020" +
    "\001\002\000\020\002\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\013\ufff2\001\002\000\006\002\uffff\005\uffff" +
    "\001\002\000\012\002\ufffd\012\005\014\015\015\014\001" +
    "\002\000\004\002\ufffb\001\002\000\010\012\005\014\015" +
    "\015\020\001\002\000\010\012\005\014\015\015\020\001" +
    "\002\000\010\002\ufffa\005\ufffa\013\ufffa\001\002\000\020" +
    "\002\ufff8\005\ufff8\006\ufff8\007\ufff8\010\030\011\031\013" +
    "\ufff8\001\002\000\010\012\005\014\015\015\020\001\002" +
    "\000\010\012\005\014\015\015\020\001\002\000\020\002" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5" +
    "\001\002\000\020\002\ufff6\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\013\ufff6\001\002\000\004\013\035\001\002" +
    "\000\020\002\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\013\ufff1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\022\003\003\004\012\005\015\006\011\007" +
    "\007\010\006\011\005\012\010\001\001\000\002\001\001" +
    "\000\014\006\011\007\007\010\006\011\005\012\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\011\007\007\010\006\011\005\012\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\012\005\022" +
    "\006\011\007\007\010\006\011\005\012\010\001\001\000" +
    "\002\001\001\000\006\010\026\011\005\001\001\000\012" +
    "\006\025\007\007\010\006\011\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\032\001\001\000\004" +
    "\011\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public instant.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (instant.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expression ::= Expression1 
            {
              instant.Absyn.Expression RESULT = null;
		instant.Absyn.Expression p_1 = (instant.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Expression*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expression4 ::= _SYMB_6 Expression _SYMB_7 
            {
              instant.Absyn.Expression RESULT = null;
		instant.Absyn.Expression p_2 = (instant.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Expression4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expression4 ::= _IDENT_ 
            {
              instant.Absyn.Expression RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new instant.Absyn.VarExpression(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Expression4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expression4 ::= _INTEGER_ 
            {
              instant.Absyn.Expression RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new instant.Absyn.LiteralExpression(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Expression4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expression3 ::= Expression4 
            {
              instant.Absyn.Expression RESULT = null;
		instant.Absyn.Expression p_1 = (instant.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Expression3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expression3 ::= Expression3 _SYMB_5 Expression4 
            {
              instant.Absyn.Expression RESULT = null;
		instant.Absyn.Expression p_1 = (instant.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		instant.Absyn.Expression p_3 = (instant.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new instant.Absyn.DivideExpression(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Expression3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expression3 ::= Expression3 _SYMB_4 Expression4 
            {
              instant.Absyn.Expression RESULT = null;
		instant.Absyn.Expression p_1 = (instant.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		instant.Absyn.Expression p_3 = (instant.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new instant.Absyn.MultiplyExpression(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Expression3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expression2 ::= Expression3 
            {
              instant.Absyn.Expression RESULT = null;
		instant.Absyn.Expression p_1 = (instant.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Expression2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expression2 ::= Expression2 _SYMB_3 Expression3 
            {
              instant.Absyn.Expression RESULT = null;
		instant.Absyn.Expression p_1 = (instant.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		instant.Absyn.Expression p_3 = (instant.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new instant.Absyn.SubtractExpression(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Expression2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expression1 ::= Expression2 
            {
              instant.Absyn.Expression RESULT = null;
		instant.Absyn.Expression p_1 = (instant.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Expression1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expression1 ::= Expression2 _SYMB_2 Expression1 
            {
              instant.Absyn.Expression RESULT = null;
		instant.Absyn.Expression p_1 = (instant.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		instant.Absyn.Expression p_3 = (instant.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new instant.Absyn.AdditionExpression(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Expression1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListStatement ::= Statement _SYMB_1 ListStatement 
            {
              instant.Absyn.ListStatement RESULT = null;
		instant.Absyn.Statement p_1 = (instant.Absyn.Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		instant.Absyn.ListStatement p_3 = (instant.Absyn.ListStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ListStatement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListStatement ::= Statement 
            {
              instant.Absyn.ListStatement RESULT = null;
		instant.Absyn.Statement p_1 = (instant.Absyn.Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new instant.Absyn.ListStatement(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ListStatement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListStatement ::= 
            {
              instant.Absyn.ListStatement RESULT = null;
		 RESULT = new instant.Absyn.ListStatement(); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ListStatement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statement ::= Expression 
            {
              instant.Absyn.Statement RESULT = null;
		instant.Absyn.Expression p_1 = (instant.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new instant.Absyn.SExpression(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Statement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Statement ::= _IDENT_ _SYMB_0 Expression 
            {
              instant.Absyn.Statement RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		instant.Absyn.Expression p_3 = (instant.Absyn.Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new instant.Absyn.SAssignment(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Statement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListStatement 
            {
              instant.Absyn.Program RESULT = null;
		instant.Absyn.ListStatement p_1 = (instant.Absyn.ListStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new instant.Absyn.Prog(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		instant.Absyn.Program start_val = (instant.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

